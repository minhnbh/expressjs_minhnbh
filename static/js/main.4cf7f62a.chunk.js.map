{"version":3,"sources":["components/Home/index.js","components/Navigation/index.js","components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","render","className","autoplay","React","Component","Navigation","mode","defaultSelectedKeys","style","lineHeight","Item","key","to","About","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAIqBA,G,kNAEjBC,OAAS,WACL,OACI,yBAAKC,UAAU,kBACX,kBAAC,IAAD,CAAUC,UAAQ,GACd,6BACI,4CAEJ,6BACI,2C,6BAVUC,IAAMC,Y,0BCCnBC,G,kNAEjBL,OAAS,WACL,OACI,yBAAKC,UAAU,wBACX,kBAAC,IAAD,CAAMK,KAAK,aAAaC,oBAAqB,CAAC,KAAMC,MAAO,CAAEC,WAAY,SACrE,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACnB,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KAAI,kBAAC,IAAD,CAAMC,GAAG,UAAT,a,6BAPCT,IAAMC,Y,QCHzBS,G,kNAEjBb,OAAS,WACL,OACI,6BACI,uC,6BALmBG,IAAMC,YCMpBU,E,2MAElBd,OAAS,WACV,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASC,UAAWJ,O,6BARVV,IAAMC,WCInBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASvB,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAELwB,SAASC,eAAe,SDsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4cf7f62a.chunk.js","sourcesContent":["import React from 'react';\nimport { Carousel } from 'antd';\nimport './styles.css';\n\nexport default class Home extends React.Component {\n\n    render = () => {\n        return (\n            <div className=\"Home-container\">\n                <Carousel autoplay>\n                    <div>\n                        <h1>minhnbh.com</h1>\n                    </div>\n                    <div>\n                        <h1>reactjs</h1>\n                    </div>\n                </Carousel>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Menu } from 'antd';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nexport default class Navigation extends React.Component {\n\n    render = () => {\n        return (\n            <div className=\"Navigation-container\">\n                <Menu mode=\"horizontal\" defaultSelectedKeys={['1']} style={{ lineHeight: '64px' }}>\n                    <Menu.Item key=\"1\"><Link to=\"/\">Home</Link></Menu.Item>\n                    <Menu.Item key=\"2\"><Link to=\"/about\">About</Link></Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n\n}","import React from 'react';\n\nexport default class About extends React.Component {\n\n    render = () => {\n        return (\n            <div>\n                <h1>About</h1>\n            </div>\n        )\n    }\n    \n}","import React from 'react';\nimport Home from './components/Home';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport { Switch, Route } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport About from './components/About';\n\nexport default class App extends React.Component {\n\n  \trender = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navigation />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={Home} />\n\t\t\t\t\t<Route exact path='/about' component={About} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t);\n\t}\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}